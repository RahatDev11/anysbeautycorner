const fetch = require('node-fetch');

// Environment Variables
const RTDB_URL = process.env.RTDB_URL;
const FIREBASE_SECRET = process.env.FIREBASE_SECRET;
const ONESIGNAL_APP_ID = process.env.ONESIGNAL_APP_ID;
const REST_API_KEY = process.env.ONESIGNAL_REST_API_KEY; // Using ONESIGNAL_REST_API_KEY for consistency

exports.handler = async (event) => {
    if (event.httpMethod !== "POST") {
        return { statusCode: 405, body: "Method Not Allowed" };
    }

    try {
        const { orderId, newStatus, oneSignalPlayerId } = JSON.parse(event.body);

        if (!orderId || !newStatus || !oneSignalPlayerId) {
            return { statusCode: 400, body: 'Missing required fields' };
        }

        // --- A. Realtime Database ржП рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ ---
        
        const updateUrl = `${RTDB_URL}/orders/${orderId}.json?auth=${FIREBASE_SECRET}`;
        
        const rtdbUpdate = {
            orderStatus: newStatus,
            lastUpdated: Date.now()
        };

        // Firebase Realtime Database ржП рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ ржХрж░рж╛
        await fetch(updateUrl, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(rtdbUpdate)
        });

        // --- B. OneSignal ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ ---

        const statusMap = {
            'Confirmed': 'тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЖржорж░рж╛ ржжрзНрж░рзБржд ржПржЯрж┐ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░ржмред',
            'Packaging': 'ЁЯУж ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржкрзНржпрж╛ржХрзЗржЬрж┐ржВ-ржП ржЖржЫрзЗред ржПржЯрж┐ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд рж╣ржЪрзНржЫрзЗред',
            'Shipped': 'ЁЯЪЪ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ! ржПржЯрж┐ рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржкрзМржБржЫрж╛ржмрзЗред',
            'Delivered': 'ЁЯОЙ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред',
            'Canceled': 'тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред',
            // ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкрзНрж░рзЯрзЛржЬржи ржорждрзЛ 'processing' ржмрж╛ ржЕржирзНржп рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
        };

        const message = statusMap[newStatus] || `ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░рзЗрж░ ржирждрзБржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${newStatus}`;
        
        const oneSignalPayload = {
            app_id: ONESIGNAL_APP_ID,
            contents: { "en": message }, // English is often required, but you can use "bn" for Bengali if configured
            include_player_ids: [oneSignalPlayerId],
            data: { "orderId": orderId, "status": newStatus }
        };

        // OneSignal API ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛрж░ ржЕржирзБрж░рзЛржз
        const oneSignalResponse = await fetch('https://onesignal.com/api/v1/notifications', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Basic ${REST_API_KEY}`
            },
            body: JSON.stringify(oneSignalPayload)
        });

        const result = await oneSignalResponse.json();
        
        return {
            statusCode: 200,
            body: JSON.stringify({ success: true, message: "Status updated and notification sent." })
        };

    } catch (error) {
        console.error("Function Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ success: false, error: error.message }) 
        };
    }
};