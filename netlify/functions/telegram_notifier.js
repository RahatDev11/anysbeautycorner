// ‡¶´‡¶æ‡¶á‡¶≤: netlify/functions/telegram_notifier.js
// Netlify Function ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá

const fetch = require('node-fetch'); 

// ===============================================
// ‡ßß. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
// ===============================================
// For local development, you can use a .env file with this variable.
// In Netlify, set this in the build & deploy environment variables.
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7516151873:AAESiHvoSJovELfQ_9HrDv-25BQuBFNYnCs'; 
const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '6247184686';

// Helper function to format cart items
function formatCartItems(cartItems) {
    let details = "";
    let index = 1;
    for (const item of cartItems) {
        // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡ßá cartItems-‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
        const itemName = item.name || 'N/A';
        const quantity = item.quantity || 1;
        const price = item.price || 0;
        const totalItemPrice = quantity * price;
        details += `${index}. ${itemName} (x${quantity}) - ${totalItemPrice} ‡¶ü‡¶æ‡¶ï‡¶æ\n`;
        index++;
    }
    return details;
}


// ===============================================
// ‡ß®. Netlify Function handler
// ===============================================
exports.handler = async (event) => {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    let orderData;
    try {
        orderData = JSON.parse(event.body); 
    } catch (error) {
        return { statusCode: 400, body: JSON.stringify({ success: false, message: 'Invalid JSON format.' }) };
    }

    // ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Firebase ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶°‡ßá‡¶ü‡¶æ)
    const customerName = orderData.customerName || 'N/A';
    const phoneNumber = orderData.phoneNumber || 'N/A';
    const address = orderData.address || 'N/A';
    const orderId = orderData.orderId || 'N/A';
    const deliveryLocation = orderData.deliveryLocation || 'N/A';
    const paymentMethod = orderData.paymentMethod || 'N/A';
    const subTotal = orderData.subTotal || '0';
    const deliveryFee = orderData.deliveryFee || '0';
    const totalAmount = orderData.totalAmount || '0';
    const orderDate = new Date().toLocaleString('bn-BD', { timeZone: 'Asia/Dhaka' });

    const productDetails = formatCartItems(orderData.cartItems || []);

    // Telegram ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
    const messageText = `
üö® <b>‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá!</b> (ID: ${orderId}) üö®
<b>‡¶∏‡¶Æ‡¶Ø‡¶º:</b> ${orderDate}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üë§ ‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:</b>
<b>‡¶®‡¶æ‡¶Æ:</b> ${customerName}
<b>‡¶´‡ßã‡¶®:</b> <a href="tel:${phoneNumber}">${phoneNumber}</a>
<b>‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:</b> ${address}
<b>‡¶è‡¶≤‡¶æ‡¶ï‡¶æ:</b> ${deliveryLocation}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üõçÔ∏è ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:</b>\n${productDetails}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üí∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:</b>
<b>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø:</b> ${paymentMethod}
<b>‡¶∏‡¶æ‡¶¨-‡¶ü‡ßã‡¶ü‡¶æ‡¶≤:</b> ${subTotal} ‡¶ü‡¶æ‡¶ï‡¶æ
<b>‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶´‡¶ø:</b> ${deliveryFee} ‡¶ü‡¶æ‡¶ï‡¶æ
<b>‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø:</b> <b>${totalAmount} ‡¶ü‡¶æ‡¶ï‡¶æ</b>
`;

    // Telegram API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
    const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    
    try {
        const response = await fetch(telegramUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: messageText,
                parse_mode: 'HTML'
            })
        });

        const data = await response.json();

        if (response.ok && data.ok) {
            return {
                statusCode: 200,
                body: JSON.stringify({ success: true, message: 'Notification sent successfully!', telegram_response: data })
            };
        } else {
            return {
                statusCode: 500,
                body: JSON.stringify({ success: false, message: 'Failed to send Telegram notification.', error: data.description || 'Unknown Telegram error' })
            };
        }

    } catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify({ success: false, message: 'Internal server error during API call.', error: error.message })
        };
    }
};
