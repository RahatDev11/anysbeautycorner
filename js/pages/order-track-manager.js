// =================================================================
// SECTION: ORDER TRACK PAGE LOGIC (‡¶∏‡¶∞‡¶≤ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®)
// =================================================================

import { database, ref, get, auth, onAuthStateChanged } from '../modules/firebase-config.js';
import { showToast } from '../modules/ui-utilities.js';

console.log('‚úÖ order-track-manager.js loaded');

// Helper function for status display
function getStatusText(status) {
    const statuses = {
        processing: '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç', 
        confirmed: '‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡¶°', 
        packaging: '‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡¶ø‡¶Ç',
        shipped: '‡¶∂‡¶ø‡¶™‡¶°', 
        delivered: '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶°', 
        failed: '‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•', 
        cancelled: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤‡¶°'
    };
    return statuses[status] || '‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç';
}

function getStatusColor(status) {
    const colors = {
        processing: { text: 'text-yellow-800', bg: 'bg-yellow-100' },
        confirmed: { text: 'text-blue-800', bg: 'bg-blue-100' },
        packaging: { text: 'text-purple-800', bg: 'bg-purple-100' },
        shipped: { text: 'text-cyan-800', bg: 'bg-cyan-100' },
        delivered: { text: 'text-green-800', bg: 'bg-green-100' },
        failed: { text: 'text-red-800', bg: 'bg-red-100' },
        cancelled: { text: 'text-gray-800', bg: 'bg-gray-200' }
    };
    return colors[status] || colors.processing;
}

// localStorage ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
function getMyOrderIdsFromLocalStorage() {
    try {
        const orders = JSON.parse(localStorage.getItem('myOrders') || '[]');
        console.log('üì¶ localStorage ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:', orders);
        return orders;
    } catch (error) {
        console.error('Error loading order IDs from localStorage:', error);
        return [];
    }
}

async function loadAllOrders() {
    console.log('üîç ‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
    const orders = [];
    
    try {
        const ordersRef = ref(database, 'orders');
        const snapshot = await get(ordersRef);
        
        if (snapshot.exists()) {
            const allOrders = snapshot.val();
            console.log('üî• Firebase ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø:', Object.keys(allOrders).length);
            
            Object.keys(allOrders).forEach(orderId => {
                orders.push({
                    id: orderId,
                    ...allOrders[orderId]
                });
            });
        } else {
            console.log('‚ùå Firebase-‡¶è ‡¶ï‡ßã‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡ßá‡¶á');
        }

    } catch (error) {
        console.error("Error loading orders:", error);
    }
    
    return orders;
}

async function loadAndDisplayUserOrders() {
    console.log('üéØ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ...');
    
    const orderListDiv = document.getElementById('orderList');
    const loginPrompt = document.getElementById('loginPrompt');
    const orderListContainer = document.getElementById('orderListContainer');

    if (!orderListDiv) {
        console.error('‚ùå orderList div ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø');
        return;
    }

    // ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨
    const allOrders = await loadAllOrders();
    const myOrderIds = getMyOrderIdsFromLocalStorage();
    const currentUser = auth.currentUser;

    console.log('üë§ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:', currentUser);
    console.log('üìã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:', myOrderIds);
    console.log('üì¶ ‡¶∏‡¶¨ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞:', allOrders.length);

    // ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
    const myOrders = allOrders.filter(order => {
        // ‡ßß. ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
        if (currentUser) {
            if (order.userId === currentUser.uid || 
                order.userEmail === currentUser.email ||
                order.customerEmail === currentUser.email) {
                return true;
            }
        }
        
        // ‡ß®. localStorage-‡¶è ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá
        if (myOrderIds.includes(order.id)) {
            return true;
        }
        
        return false;
    });

    console.log('‚úÖ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞:', myOrders.length);

    // UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    if (loginPrompt) loginPrompt.style.display = 'none';
    if (orderListContainer) orderListContainer.style.display = 'block';
    
    if (myOrders.length > 0) {
        // Sort orders by orderDate in descending order (newest first)
        myOrders.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate));
        
        let ordersHtml = '';
        
        myOrders.forEach(order => {
            const orderId = order.id;
            const statusColor = getStatusColor(order.status);
            ordersHtml += `
                <div class="bg-white p-4 rounded-lg shadow-md mb-4 cursor-pointer hover:shadow-lg transition-shadow" data-order-id="${orderId}">
                    <div class="flex justify-between items-center">
                        <p class="font-semibold">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: ${orderId}</p>
                        <span class="px-3 py-1 rounded-full text-xs font-semibold ${statusColor.bg} ${statusColor.text}">
                            ${getStatusText(order.status)}
                        </span>
                    </div>
                    <div class="flex justify-between items-center mt-2">
                        <p class="text-gray-700">‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: ${order.totalAmount || 0} ‡¶ü‡¶æ‡¶ï‡¶æ</p>
                        <p class="text-sm text-gray-600">${order.orderDate ? new Date(order.orderDate).toLocaleDateString('bn-BD') : 'N/A'}</p>
                    </div>
                    <div class="mt-2">
                        <p class="text-sm text-gray-600">‡¶®‡¶æ‡¶Æ: ${order.customerName || 'N/A'}</p>
                    </div>
                </div>
            `;
        });
        
        orderListDiv.innerHTML = ordersHtml;
        console.log('‚úÖ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');

    } else {
        orderListDiv.innerHTML = `
            <div class="text-center p-8">
                <p class="text-gray-500 italic mb-4">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>
                <p class="text-sm text-gray-400">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§</p>
            </div>
        `;
        console.log('‚ùå ‡¶ï‡ßã‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø');
    }
}

function setupLoginButton() {
    const loginButton = document.getElementById('loginButton');
    if (loginButton) {
        console.log('üîò ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá');
        loginButton.onclick = () => {
            console.log('üëÜ ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
            if (window.loginWithGmail) {
                window.loginWithGmail();
            } else {
                console.error('‚ùå loginWithGmail ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø');
            }
        };
    }
}

async function initializeOrderTrackPage() {
    console.log('üöÄ ORDER TRACK PAGE INITIALIZATION STARTED');

    // Setup login button
    setupLoginButton();

    // Set up auth state listener
    onAuthStateChanged(auth, (user) => {
        console.log('üîê Auth state changed:', user ? `User: ${user.email}` : 'No user');
        loadAndDisplayUserOrders();
    });

    // Initial load
    await loadAndDisplayUserOrders();

    console.log('‚úÖ ORDER TRACK PAGE INITIALIZATION COMPLETED');
    return Promise.resolve();
}

export {
    initializeOrderTrackPage
};